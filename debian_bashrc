# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    #alias grep='grep --color=auto'
    #alias fgrep='fgrep --color=auto'
    #alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -l'
alias la='ls -A'
alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# custom changes

# ideadevice specific
# epsilon
export epsilon=$HOME/Codebases/lambda
alias ep='export PYTHONPATH=$epsilon/src/id/vaitarna:$PYTHONPATH; cd $epsilon'
source "/usr/share/virtualenvwrapper/virtualenvwrapper.sh"
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

# arc
export arcpath=$HOME/Sources/arc 
export PATH=${arcpath}/arcanist/bin:$PATH
if [ -f ${arcpath}/arcanist/resources/shell/bash-completion ]; then
    source ${arcpath}/arcanist/resources/shell/bash-completion
fi

# calm
export CLOUD=$HOME/Codebases/cloud
export CALM=$HOME/Codebases/calm
export IPYTHON_ENV=/home/tanmay/.virtualenvs/ipython/

# enabled ls aliases line 91-93
alias workoff='deactivate'
workon calm
# workon hackathone

# epsilon functions
alias ep_boot='supervisord -c /home/tanmay/Codebases/lambda/conf/supervisord.conf && sleep 2 &&
    ep_status'
ep_start() {
    if [ -z "$1" ]; then
        echo "Starting all..."
        supervisorctl -c /home/tanmay/Codebases/lambda/conf/supervisord.conf start all
        return 0
    fi

    if [ "$1" == "-h" ]; then
        echo "Usage: ep_start [service_pattern1] ... [service_patternN]"
        return 1
    fi

    to_grep=$(echo $@|sed 's/ /\\\|/g')
    to_kill=$(supervisorctl -c /home/tanmay/Codebases/lambda/conf/supervisord.conf status|awk '{print $1}'|grep $to_grep)

    if [ ! -z "$to_kill" ]; then
        for k in $to_kill; do 
            supervisorctl -c /home/tanmay/Codebases/lambda/conf/supervisord.conf start $k;
        done
    fi
}

ep_status() {
    if [ -z "$1" ]; then
        echo "Fetching status for all..."
        supervisorctl -c /home/tanmay/Codebases/lambda/conf/supervisord.conf status all
        return 0
    fi

    if [ "$1" == "-h" ]; then
        echo "Usage: ep_status [service_pattern1] ... [service_patternN]"
        return 1
    fi

    to_grep=$(echo $@|sed 's/ /\\\|/g')
    to_kill=$(supervisorctl -c /home/tanmay/Codebases/lambda/conf/supervisord.conf status|awk '{print $1}'|grep $to_grep)

    if [ ! -z "$to_kill" ]; then
        for k in $to_kill; do 
            supervisorctl -c /home/tanmay/Codebases/lambda/conf/supervisord.conf status $k;
        done
    fi
}

ep_stop() {
    if [ -z "$1" ]; then
        echo "Stopping all..."
        supervisorctl -c /home/tanmay/Codebases/lambda/conf/supervisord.conf stop all
        return 0
    fi

    if [ "$1" == "-h" ]; then
        echo "Usage: ep_stop [service_pattern1] ... [service_patternN]"
        return 1
    fi

    to_grep=$(echo $@|sed 's/ /\\\|/g')
    to_kill=$(supervisorctl -c /home/tanmay/Codebases/lambda/conf/supervisord.conf status|awk '{print $1}'|grep $to_grep)

    if [ ! -z "$to_kill" ]; then
        for k in $to_kill; do 
            supervisorctl -c /home/tanmay/Codebases/lambda/conf/supervisord.conf stop $k;
        done
    fi
}
alias ep_shutdown='supervisorctl -c /home/tanmay/Codebases/lambda/conf/supervisord.conf shutdown'
ep_restart() {
    if [ -z "$1" ]; then
        echo "Restarting all..."
        supervisorctl -c /home/tanmay/Codebases/lambda/conf/supervisord.conf restart all
        return 0
    fi

    if [ "$1" == "-h" ]; then
        echo "Usage: ep_restart [service_pattern1] ... [service_patternN]"
        return 1
    fi

    to_grep=$(echo $@|sed 's/ /\\\|/g')
    to_kill=$(supervisorctl -c /home/tanmay/Codebases/lambda/conf/supervisord.conf status|awk '{print $1}'|grep $to_grep)

    if [ ! -z "$to_kill" ]; then
        for k in $to_kill; do 
            supervisorctl -c /home/tanmay/Codebases/lambda/conf/supervisord.conf restart $k;
        done
    fi
}


# calm functions
alias c_boot='supervisord -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf'
c_start() {
    if [ -z "$1" ]; then
        echo "Starting all..."
        supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf start all
        return 0
    fi

    if [ "$1" == "-h" ]; then
        echo "Usage: c_start [service_pattern1] ... [service_patternN]"
        return 1
    fi

    to_grep=$(echo $@|sed 's/ /\\\|/g')
    to_kill=$(supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf status|awk '{print $1}'|grep $to_grep)

    if [ ! -z "$to_kill" ]; then
        for k in $to_kill; do 
            supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf start $k;
        done
    fi
}

c_status() {
    if [ -z "$1" ]; then
        echo "Fetching status for all..."
        supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf status all
        return 0
    fi

    if [ "$1" == "-h" ]; then
        echo "Usage: c_status [service_pattern1] ... [service_patternN]"
        return 1
    fi

    to_grep=$(echo $@|sed 's/ /\\\|/g')
    to_kill=$(supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf status|awk '{print $1}'|grep $to_grep)

    if [ ! -z "$to_kill" ]; then
        for k in $to_kill; do 
            supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf status $k;
        done
    fi
}

c_stop() {
    if [ -z "$1" ]; then
        echo "Stopping all..."
        supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf stop all
        return 0
    fi

    if [ "$1" == "-h" ]; then
        echo "Usage: c_stop [service_pattern1] ... [service_patternN]"
        return 1
    fi

    to_grep=$(echo $@|sed 's/ /\\\|/g')
    to_kill=$(supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf status|awk '{print $1}'|grep $to_grep)

    if [ ! -z "$to_kill" ]; then
        for k in $to_kill; do 
            supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf stop $k;
        done
    fi
}
alias c_shutdown='supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf shutdown'
c_restart() {
    if [ -z "$1" ]; then
        echo "Restarting all..."
        supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf restart all
        return 0
    fi

    if [ "$1" == "-h" ]; then
        echo "Usage: c_restart [service_pattern1] ... [service_patternN]"
        return 1
    fi

    to_grep=$(echo $@|sed 's/ /\\\|/g')
    to_kill=$(supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf status|awk '{print $1}'|grep $to_grep)

    if [ ! -z "$to_kill" ]; then
        for k in $to_kill; do 
            supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf restart $k;
        done
    fi
}

alias upload_wfs='find ~/Codebases/calm-workflows/ -name "*.wf"|xargs epdb.py import --replace'
alias c_build_ui='cd /calm/src/calm/client/styx && ./styx --build && cd -'
alias vimbashrc='vim ~/.bashrc && source $_'
export PATH=$PATH:/sbin:/bin:/usr/sbin

export JAVA_HOME='/usr/lib/jvm/java-7-openjdk-amd64/jre'
export EC2_HOME='/usr/local/ec2/ec2-api-tools-1.7.5.1'
export PATH=$PATH:$EC2_HOME/bin 

export DOCKER_HOST=tcp://localhost:2375
function v_tunnel {
    sudo ssh -L 0.0.0.0:7331:10.0.7.10:7331 -L 0.0.0.0:5480:10.0.7.10:5480  -L 0.0.0.0:9443:10.0.7.10:9443 -L 0.0.0.0:443:10.0.7.10:443 calmdev@demo.calm.io -i ~/.ssh/vmware_id_rsa
}

function to_mac {
    scp -i ~/Documents/mac.pem "$1"  tanmay.kakkar@mac:~/
}

find_in_js() {
    if [ "$#" -eq 1 ]; then
        find ./ -name '*.js*'|xargs grep "$1"
        return 0
    fi
    find $1 -name '*.js*'|xargs grep "$2"
}

find_in_python() {
    if [ "$#" -eq 1 ]; then
        find ./ -name '*.py'|xargs grep "$1"
        return 0
    fi
    find $1 -name '*.py'|xargs grep "$2"
}

find_in_java() {
    if [ "$#" -eq 1 ]; then
        find ./ -name '*.java'|xargs grep "$1"
        return 0
    fi
    find $1 -name '*.java'|xargs grep "$2"
}

find_in_wf() {
    if [ "$#" -eq 1 ]; then
        find ./ -name '*.wf'|xargs grep "$1"
        return 0
    fi
    find $1 -name '*.wf'|xargs grep "$2"
}

alias time_sync='sudo ntpdate pool.ntp.org'
stty susp undef
bind '"\ez":"fg\015"'


# extra
export PATH=$PATH:/usr/local/go/bin

# to make ctrl+ctrl+s work in vim
# http://vim.wikia.com/wiki/Map_Ctrl-S_to_save_current_or_new_files` 
vim()
{
    # osx users, use stty -g
    local STTYOPTS="$(stty --save)"
    stty stop '' -ixoff
    command vim "$@"
    stty "$STTYOPTS"
}
stty start undef
# tmux -2

# go 1.6.2 setup
export GOPATH=$HOME/.go
export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin:/usr/local/go/bin

SSH_ENV="$HOME/.ssh/environment"
 
function start_agent {
echo "Initialising new SSH agent..."
/usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
echo succeeded
chmod 600 "${SSH_ENV}"
. "${SSH_ENV}" > /dev/null
/usr/bin/ssh-add;
}
 
# Source SSH settings, if applicable
 
if [ -f "${SSH_ENV}" ]; then
    . "${SSH_ENV}" > /dev/null
    #ps ${SSH_AGENT_PID} doesn't work under cywgin
    ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
    start_agent;
}
else
    start_agent;
fi

vimproto()
{
    vim $1 && protoc --python_out=. $1
}
# Run twolfson/sexy-bash-prompt
. ~/.bash_prompt

HISTFILESIZE=1000000000
HISTSIZE=1000000
