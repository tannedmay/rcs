# My Snippets for Go

priority -10

snippet err "If error"
if err != nil {
	logger.Log(p.Error, err.Error())
	return nil, err
}
endsnippet

snippet nerr "New error"
	err := entity.NewError(entity.ErrorCodeBadRequest, "${2:invalid value}")
	logger.Log(p.Error, err.Error())
	return nil, err
endsnippet

snippet todo "todo comment" b
// TODO: ${2:Tanmay} `date -I` ${1:desc}
endsnippet

snippet log "log statement" b
logger.Log(p.Error, "${1:invalid value}")
endsnippet

snippet logger "Get logger from ctx" b
logger := rctx.LoggerWithFn(ctx)
endsnippet

snippet userId "Get userId from ctx" b
userId := rctx.AuthUserIdFromContext(ctx)
endsnippet

snippet memberId "Get memberId from ctx" b
memberId := rctx.AuthUserIdFromContext(ctx)
endsnippet

snippet rctx "pass context with logger" i
rctx.WithLogger(ctx, logger), di, 
endsnippet

# snippet ctx "ctx params" i
# ctx context.Context, di deps.DI,
# endsnippet

snippet rtest "Test router" b
func Test${1:NAME}(t *testing.T) {
	e := setup()

	NewRouteTester[entity.Success](t, e, "${2:ENDPOINT}").
		Get("get book").Status(200)
		$0
}
endsnippet

snippet ftest "Test function"
func Test${1:NAME}(t *testing.T) {
	e := test.Setup()
	defer test.Teardown()

	test.NewFnTester[entity.Success](t, e).
		RunErrOnly("$1", func() entity.Error {
			return e.DI.F().${2:FEATURE}().$1(e.Context, e.DI, input)
		}).NoError()
		$0
}
endsnippet

snippet newstruct "new struct" 
type ${1:NAME}Id string
type DB$1 struct {
	Id   $1Id  `json:"id,omitempty"`
	$0
}

func (doc *DB$1) SetId(id string) {
	doc.Id = $1Id(id)
}

func (doc *DB$1) GetId() string {
	return string(doc.Id)
}

func (doc *DB$1) GetCollection() Collection {
	return Collection$1
}
endsnippet

snippet swagpost "Add structs and post handler" 
type ${1:METHOD}Input struct {

}

type $1Output struct {

}

// $1
// @Summary  $1
// @Tags     ${2:TAG}
// @Param    body body      $1Input true "post body"
// @Success  200   {object} $1Output
// @Failure  400   {object} entity.HTTPResFailure
// @Failure  401   {object} entity.HTTPResFailure
// @Failure  500   {object} entity.HTTPResFailure
// @Router   /${3:PATH}    [post]
// @Security ApiKeyAuth
func $1(w http.ResponseWriter, r *http.Request, params $1Input, di deps.DI) (*$1Output, entity.Error) {
	ctx := r.Context()
	logger := rctx.LoggerWithFn(ctx, p.${4:PARAM}, params.$4)
	logger.Log()

	return &$1Output{}, nil
}
endsnippet

snippet swagput "Add structs and put handler" 
type ${1:METHOD}Input struct {

}

type $1Output struct {

}

// $1
// @Summary  $1
// @Tags     ${2:TAG}
// @Param    body body      $1Input true "put body"
// @Param		$4	path		string	true	"$4"
// @Success  200   {object} $1Output
// @Failure  400   {object} entity.HTTPResFailure
// @Failure  401   {object} entity.HTTPResFailure
// @Failure  500   {object} entity.HTTPResFailure
// @Router   /${3:PATH}    [put]
// @Security ApiKeyAuth
func $1(w http.ResponseWriter, r *http.Request, params $1Input, di deps.DI) (*$1Output, entity.Error) {
	ctx := r.Context()
	logger := rctx.LoggerWithFn(ctx, p.${4:PARAM}, params.$4)
	logger.Log()

	return &$1Output{}, nil
}
endsnippet

snippet swagget "Add structs and get handler"
type ${1:METHOD}Input struct {

}

type $1Output struct {

}

// $1
// @Summary  $1
// @Tags     ${2:TAG}
// @Param    input query $1Input true "query params"
// @Success  200   {object} $1Output
// @Failure  400   {object} entity.HTTPResFailure
// @Failure  401   {object} entity.HTTPResFailure
// @Failure  500   {object} entity.HTTPResFailure
// @Router   /${3:PATH}    [get]
// @Security ApiKeyAuth
func $1(w http.ResponseWriter, r *http.Request, params $1Input, di deps.DI) (*$1Output, entity.Error) {
	ctx := r.Context()
	logger := rctx.LoggerWithFn(ctx, p.${4:PARAM}, params.$4)
	logger.Log()

	return &$1Output{}, nil
}
endsnippet

snippet swagdel "Add structs and delete handler"
type ${1:METHOD}Input struct {

}

// $1
// @Summary  $1
// @Tags     ${2:TAG}
// @Param		$4	path		string	true	"$4"
// @Success  200   {object} $1Output
// @Failure  400   {object} entity.HTTPResFailure
// @Failure  401   {object} entity.HTTPResFailure
// @Failure  500   {object} entity.HTTPResFailure
// @Router   /${3:PATH}    [delete]
// @Security ApiKeyAuth
func $1(w http.ResponseWriter, r *http.Request, di deps.DI) (*entity.Success, entity.Error) {
	ctx := r.Context()
	${4:PARAM} := chi.URLParam(r, p.$4)
	logger := rctx.LoggerWithFn(ctx, p.$4, $4)
	logger.Log()

	return &entity.Success{}, nil
}
endsnippet

snippet dbget "DB get usage"
${1:Out}, err := db.Get[entity.${2:Entity}](rctx.WithLogger(ctx, logger), di.ProvideDB(),
entity.Collection${3:Name}, ${4:DocId})
if err != nil {
	logger.Log(p.Error, err.Error())
	return nil, err
}
endsnippet

snippet dbgetnotfound "db get usage with not found"
${1:Out}, err := db.Get[entity.${2:Entity}](rctx.WithLogger(ctx, logger), di.ProvideDB(), entity.Collection${3:Name}, ${4:DocId})
if entity.IsNotFound(err) {
	${5:NO_FOUND}
} else if err != nil {
	logger.Log(p.Error, err.Error())
	return nil, err
}
endsnippet

snippet errbad "bad err"
err := entity.BadRequestError(${1:BAD})
logger.Log(p.Error, err.Error())
return nil, err
endsnippet

snippet errinternal "internal err" 
err := entity.NewInternalError(${1:err})
logger.Log(p.Error, err.Error())
return nil, err
endsnippet

snippet getquery "get entities with limit and offset i.e.- GetQuestions"
func Get${1:Entity}s(
	ctx context.Context,
	db deps.DB,
	bucket string,
	limit int,
	offset int,
) ([]entity.DB$1, entity.Error) {
	logger := rctx.LoggerWithFn(ctx)

	queryString := "SELECT meta(b).id as id, b.* " +
	" FROM " + GetQueryFrom(bucket, entity.Collection$1) + " b " +
	" LIMIT ${2:limit} OFFSET ${3:offset}"

	params := make(map[string]interface{})
	params["limit"] = limit
	params["offset"] = offset

	return query[entity.DB$1](rctx.WithLogger(ctx, logger), db, queryString, params, entity.QueryScanConsistencyNotRequired, nil)
}
endsnippet
