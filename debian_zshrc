# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh
export ENABLE_APLOS=false
export PASS_PROJECT=true
# export APLOS_IP=mypc2
export APLOS_IP=10.5.215.159
export APLOS_BUILD_IP=10.4.206.172
# export APLOS_BUILD_IP=10.4.96.150
export LC_ALL=en_US.UTF-8

# virtualenvwrapper
export WORKON_HOME=$HOME/.virtualenvs
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python
export GOPATH=$HOME/.go:/calm/.go:$TOP/.go
export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
export DISABLE_SSL_ROUTE=true
export DISABLE_ELASTIC=true
export DEPLOYMENT_TYPE=dev

# Dev vm specific
if [ $HOST = "tanmay-kakkar-2.eng.nutanix.com" ]; then
    export PATH=$PATH:$HOME/bin
    export TOP=~/Codebases/main
    export PYTHONUSERBASE=$TOP'/.python'
    export PYTHONPATH=:$TOP'/.python'
    export DISTCC_HOSTS="blr-distcc-proxy.eng.nutanix.com"
    export CCACHE_DIR=$HOME/.ccache
    export NX_YUM_HOST=endor.dyn.nutanix.com
    export NX_YUM_PATH=yum
fi

source /usr/bin/virtualenvwrapper.sh &> /dev/null || source /usr/local/bin/virtualenvwrapper.sh &> /dev/null 

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="agnoster"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(sudo git virtualenvs python fedora autopep8 pip supervisor arcanist zsh-syntax-highlighting zsh-256color alias-tips zsh-completions zsh-syntax-highlighting, zsh-autosuggestions alias-tips vundle yum virtualenv virtualenvwrapper ssh-agent notify docker)

source $ZSH/oh-my-zsh.sh
workon calm

export PATH=/calm/bin:$PATH
export ERGON_COMPONENT_NAME='Calm-Hercules-Tanmay'
export EDITOR="/usr/bin/vim"
export NUTANIX_SERVER="https://10.5.215.166:9440"
export AWS_V3_SERVER="https://10.5.215.166:9440"

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias time_sync='sudo ntpdate pool.ntp.org'
alias upload_wfs='workon epsilon && find ~/Codebases/calm-workflows/ -name "*.wf"|xargs epdb.py import --replace'
alias vimzshrc='vim ~/.zshrc && source $_'
alias list_my_branches="git for-each-ref --format=' %(authorname) %09 %(refname)'|grep Tanmay|grep remote"
alias workoff='deactivate'
alias makepy="cd $TOP && make all_pydeps && rm build/python-tree/nutanix_python.egg ; make python-modules-tree && echo 'Path for nutanix python egg: build/python-tree/nutanix_python.egg'"
alias makego="cd $TOP && make all_godeps && make all_go_bin"
alias makeclean="make realclean"
alias makencc="makepy && make ncc-installer"

get_nutanix_egg(){
    if [ -z $1 ]; then
        scp root@10.5.216.234:"/root/main/.python/dist/nutanix_python-*.egg" /tmp
    else
        scp root@10.5.216.234:"/root/main/.python/dist/nutanix_python-*.egg" $1
    fi
}

alias get_and_install_new_nutanix_egg='get_nutanix_egg /tmp/ && easy_install /tmp/nutanix_python-*.egg'
alias get_insights_templates='scp nutanix@tanmay-kakkar-1.eng.nutanix.com:~/Codebases/main/installer/config/insights/entity_attribute_config.proto.template ~/idf_template/entity_attribute_config.proto && scp nutanix@tanmay-kakkar-1.eng.nutanix.com:~/Codebases/main/installer/config/insights/entity_type_config.proto.template ~/idf_template/entity_type_config.proto'

# Arcanist stuff
arcpath=$HOME/Codebases/arc
export PATH=${arcpath}/arcanist/bin:$PATH
if [ -f ${arcpath}/arcanist/resources/shell/bash-completion ]; then
        source ${arcpath}/arcanist/resources/shell/bash-completion
fi

# for custom completion plugin i.e.- dbm.py
autoload -U compinit && compinit

# idf_check
# check_idf(){
# 	curl $IDF_URL &> /dev/null && restart_idf_container
# }

# build jove 
build_jove() {
    cd /calm/
    git pull
    make
    cd /calm/src/calm/server/jove
    make build
}

# copy jove
copy_jove(){
    if [ "$1" = "-h" ]; then
        echo "Usage: copy_jove [dev_vm_ip]"
        return 1
    fi
    if [ -z "$1" ]; then
        dev_vm='tanmay-kakkar.dev.eng.nutanix.com'
    else
        dev_vm=$1
    fi
    scp nutanix@"tanmay-kakkar-1.eng.nutanix.com":/calm/src/calm/server/jove/jove /calm/bin

}

# custom functions 
find_in_js() {
    if [ "$#" -eq 1 ]; then
        find ./ -name '*.js*' -type f|xargs grep "$1"
        return 0
    fi
    find $1 -name '*.js*' -type f|xargs grep "$2"
}

find_in_python() {
    if [ "$#" -eq 1 ]; then
        find ./ -name '*.py' -type f|xargs grep "$1"
        return 0
    fi
    find $1 -name '*.py' -type f|xargs grep "$2"
}

find_in_java() {
    if [ "$#" -eq 1 ]; then
        find ./ -name '*.java' -type f|xargs grep "$1"
        return 0
    fi
    find $1 -name '*.java' -type f|xargs grep "$2"
}

find_in_wf() {
    if [ "$#" -eq 1 ]; then
        find ./ -name '*.wf' -type f|xargs grep "$1"
        return 0
    fi
    find $1 -name '*.wf' -type f|xargs grep "$2"
}

add_port_idf_container() {
    port=$(curl "http://localhost:2027" --silent|grep "Entity Types"|egrep -o 'https?://[^ ]+'|cut -d':' -f3|cut -d'/' -f1)
    container_id=$(docker ps |grep opscalm/idf|awk '{print $1}')
    echo "Adding port forwarding at port" $port
    ipaddress=$(docker inspect $container_id|grep '"IPAddress":' -m 1|grep '[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*' -o)
    # sudo iptables -t nat -A  DOCKER -p tcp --dport $port -j DNAT --to-destination $ipaddress:$port
}

wait_till_idf_up() {
    printf "Waiting for idf service to come up"
    until $(curl --output /dev/null --silent --head --fail http://localhost:2027); do
        printf '.'
        sleep 5
    done
    echo "\nNow IDF service is up in container"
}

start_idf_container() {
    if [ -z "$1" ]; then
	    container_id=$(docker ps |grep idf_container|awk '{print $1}')
    else
	    container_id=$(docker ps |grep idf_test_container|awk '{print $1}')	
    fi

    if [ "$container_id" = "" ]; then
	if [ -z "$1" ]; then
		docker run -dt --name idf_container -p 2027:2027 -v ~/idf_template/:/root/idf_template/ registry.calm.nutanix.com:5000/idf
	else
		docker run -dt --name idf_test_container -p 2028:2027 -v ~/idf_template/:/root/idf_template/ registry.calm.nutanix.com:5000/idf
	fi
	wait_till_idf_up
        # add_port_idf_container
        return 0
    else
        echo "Already running"
        return 1
    fi
}

stop_idf_container() {
    if [ -z "$1" ]; then
	    container_id=$(docker ps -a|grep idf_container|awk '{print $1}')
    else
	    container_id=$(docker ps -a|grep idf_test_container|awk '{print $1}')	
    fi
    if [ ! -z "$container_id" ]; then
	    docker rm -f $container_id
    fi
}

restart_idf_container() {
    # delete existing container
    stop_idf_container $1

    # start new container
    start_idf_container $1
}

# epsilon functions
alias ep_boot='supervisord -c /home/tanmay/Codebases/epsilon/conf/supervisord.conf && sleep 2 &&
    ep_status'
ep_start() {
    if [ -z "$1" ]; then
        echo "Starting all..."
        supervisorctl -c /home/tanmay/Codebases/epsilon/conf/supervisord.conf start all
        return 0
    fi

    if [ "$1" = "-h" ]; then
        echo "Usage: ep_start [service_pattern1] ... [service_patternN]"
        return 1
    fi

    to_grep=$(echo $@|sed 's/ /\\\|/g')
    to_kill=$(supervisorctl -c /home/tanmay/Codebases/epsilon/conf/supervisord.conf status|awk '{print $1}'|grep $to_grep)

    if [ ! -z "$to_kill" ]; then
        for k in $to_kill; do 
            supervisorctl -c /home/tanmay/Codebases/epsilon/conf/supervisord.conf start $k;
        done
    fi
}

ep_status() {
    if [ -z "$1" ]; then
        echo "Fetching status for all..."
        supervisorctl -c /home/tanmay/Codebases/epsilon/conf/supervisord.conf status all
        return 0
    fi

    if [ "$1" = "-h" ]; then
        echo "Usage: ep_status [service_pattern1] ... [service_patternN]"
        return 1
    fi

    to_grep=$(echo $@|sed 's/ /\\\|/g')
    echo $to_grep
    to_kill=$(supervisorctl -c /home/tanmay/Codebases/epsilon/conf/supervisord.conf status|awk '{print $1}'|grep $to_grep)
    echo $to_kill

    if [ ! -z "$to_kill" ]; then
        for k in $to_kill; do 
            supervisorctl -c /home/tanmay/Codebases/epsilon/conf/supervisord.conf status $k;
        done
    fi
}

ep_stop() {
    if [ -z "$1" ]; then
        echo "Stopping all..."
        supervisorctl -c /home/tanmay/Codebases/epsilon/conf/supervisord.conf stop all
        return 0
    fi

    if [ "$1" = "-h" ]; then
        echo "Usage: ep_stop [service_pattern1] ... [service_patternN]"
        return 1
    fi

    to_grep=$(echo $@|sed 's/ /\\\|/g')
    to_kill=$(supervisorctl -c /home/tanmay/Codebases/epsilon/conf/supervisord.conf status|awk '{print $1}'|grep $to_grep)

    if [ ! -z "$to_kill" ]; then
        for k in $to_kill; do 
            supervisorctl -c /home/tanmay/Codebases/epsilon/conf/supervisord.conf stop $k;
        done
    fi
}
ep_shutdown(){
    supervisorctl -c /home/tanmay/Codebases/epsilon/conf/supervisord.conf shutdown
    while [ -e /tmp/supervisor.sock ]
    do
        sleep 2
        echo "Waiting for closing of socket"
    done
}
ep_restart() {
    if [ -z "$1" ]; then
        echo "Restarting all..."
        supervisorctl -c /home/tanmay/Codebases/epsilon/conf/supervisord.conf restart all
        return 0
    fi

    if [ "$1" = "-h" ]; then
        echo "Usage: ep_restart [service_pattern1] ... [service_patternN]"
        return 1
    fi

    to_grep=$(echo $@|sed 's/ /\\\|/g')
    to_kill=$(supervisorctl -c /home/tanmay/Codebases/epsilon/conf/supervisord.conf status|awk '{print $1}'|grep $to_grep)

    if [ ! -z "$to_kill" ]; then
        for k in $to_kill; do 
            supervisorctl -c /home/tanmay/Codebases/epsilon/conf/supervisord.conf restart $k;
        done
    fi
}

ep_log() {
    if [ -z "$1" ]; then
        echo "Usage: ep_log 'service_pattern'"
        return 1
    fi

    if [ "$1" = "-h" ]; then
        echo "Usage: ep_log 'service_pattern'"
        return 1
    fi

    to_grep=$(echo $1|sed 's/ /\\\|/g')
    to_kill=$(supervisorctl -c /home/tanmay/Codebases/epsilon/conf/supervisord.conf status|awk '{print $1}'|grep $to_grep)

    echo "Service to log: $to_kill"
    if [ ! -z "$to_kill" ]; then
        supervisorctl -c /home/tanmay/Codebases/epsilon/conf/supervisord.conf tail -f $to_kill
    fi
}

alias ep_reboot='ep_shutdown && ep_boot'

# calm functions
alias c_boot='supervisord -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf && c_status'
c_start() {
    if [ -z "$1" ]; then
        echo "Starting all..."
        supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf start all
        return 0
    fi

    if [ "$1" = "-h" ]; then
        echo "Usage: c_start [service_pattern1] ... [service_patternN]"
        return 1
    fi

    to_grep=$(echo $@|sed 's/ /\\\|/g')
    to_kill=$(supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf status|awk '{print $1}'|grep $to_grep)

    if [ ! -z "$to_kill" ]; then
        for k in $to_kill; do 
            supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf start $k;
        done
    fi
}

c_status() {
    if [ -z "$1" ]; then
        echo "Fetching status for all..."
        supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf status all
        return 0
    fi

    if [ "$1" = "-h" ]; then
        echo "Usage: c_status [service_pattern1] ... [service_patternN]"
        return 1
    fi

    to_grep=$(echo $@|sed 's/ /\\\|/g')
    to_kill=$(supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf status|awk '{print $1}'|grep $to_grep)

    if [ ! -z "$to_kill" ]; then
        for k in $to_kill; do 
            supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf status $k;
        done
    fi
}

c_stop() {
    if [ -z "$1" ]; then
        echo "Stopping all..."
        supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf stop all
        return 0
    fi

    if [ "$1" = "-h" ]; then
        echo "Usage: c_stop [service_pattern1] ... [service_patternN]"
        return 1
    fi

    to_grep=$(echo $@|sed 's/ /\\\|/g')
    to_kill=$(supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf status|awk '{print $1}'|grep $to_grep)

    if [ ! -z "$to_kill" ]; then
        for k in $to_kill; do 
            supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf stop $k;
        done
    fi
}
c_shutdown() {
    supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf shutdown
    while [ -e /tmp/calm_supervisor.sock ]
    do
        sleep 2
        echo "Waiting for closing of socket"
    done
}

c_restart() {
    if [ -z "$1" ]; then
        echo "Restarting all..."
        supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf restart all
        return 0
    fi

    if [ "$1" = "-h" ]; then
        echo "Usage: c_restart [service_pattern1] ... [service_patternN]"
        return 1
    fi

    to_grep=$(echo $@|sed 's/ /\\\|/g')
    to_kill=$(supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf status|awk '{print $1}'|grep $to_grep)

    if [ ! -z "$to_kill" ]; then
        for k in $to_kill; do 
            supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf restart $k;
        done
    fi
}

c_log() {
    if [ -z "$1" ]; then
        echo "Usage: c_log 'service_pattern'"
        return 1
    fi

    if [ "$1" = "-h" ]; then
        echo "Usage: c_log 'service_pattern'"
        return 1
    fi

    to_grep=$(echo $1|sed 's/ /\\\|/g')
    to_kill=$(supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf status|awk '{print $1}'|grep $to_grep)

    echo "Service to log: $to_kill"
    if [ ! -z "$to_kill" ]; then
        supervisorctl -c /home/tanmay/Codebases/calm/conf/supervisor/supervisord.conf tail -f $to_kill
    fi
}

alias c_reboot='c_shutdown && sleep 15 && c_boot'


# vaitarna functions
alias vaitarna_boot='workon vaitarna && supervisord -c /home/tanmay/Codebases/lambda/conf/supervisord.conf && sleep 2 &&
    vaitarna_status'

vaitarna_shutdown(){
    workon vaitarna
    supervisorctl -c /home/tanmay/Codebases/lambda/conf/supervisord.conf shutdown
    while [ -e /tmp/vaitarna.sock ]
    do
        sleep 2
        echo "Waiting for closing of socket"
    done
}

vaitarna_log() {
    to_kill='epsilon-app:vaitarna' 

    echo "Service to log: $to_kill"
    supervisorctl -c /home/tanmay/Codebases/lambda/conf/supervisord.conf tail -f $to_kill
}

vaitarna_status() {
    workon vaitarna
    supervisorctl -c /home/tanmay/Codebases/lambda/conf/supervisord.conf status all;
}

alias vaitarna_reboot='vaitarna_shutdown && vaitarna_boot'

# check idf python code
python_code="
import gflags

FLAGS = gflags.FLAGS({})

from calm.lib.model.store.db_session import create_session
from calm.scripts.cshell import init_contexts
from calm.lib.model import Cost

init_contexts()
create_session()
Cost.query()
"
check_idf() {
    echo "Checking the connection.."
    if [ -z "$1" ]; then
        timeout 10 python -c $python_code
    else
        timeout $1 python -c $python_code
    fi
    if [ "$?" = "0" ]; then
        echo "Successful"
        return 0
    else
        echo "Failure"
        return 1
    fi
}

function straceall {
    to_grep=$(echo $1|sed 's/ /\\\|/g')
    inargs=$(ps aux|grep $to_grep|awk '{print $2}'|sed ':a;N;$!ba;s/\n/ /g'|sed 's/\([0-9]*\)/-p \1/g')
    strace $(echo $inargs)
}

# zsh-bd
. $HOME/.zsh/plugins/bd/bd.zsh

# zsh-bd
. $HOME/.zsh/plugins/bd/bd.zsh
